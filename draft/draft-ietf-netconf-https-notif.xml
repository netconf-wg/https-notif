<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<rfc category="std" docName="draft-ietf-netconf-https-notif-06"
     ipr="trust200902">
  <?rfc toc="yes"?>

  <front>
    <title abbrev="HTTPS Configured Subscription">An HTTPS-based Transport for
    Configured Subscriptions</title>

    <author fullname="Mahesh Jethanandani" initials="M.J." surname="Jethanandani">
      <organization>Kloud Services</organization>
      <address>
        <email>mjethanandani@gmail.com</email>
      </address>
    </author>

    <author fullname="Kent Watsen" initials="K.W." surname="Watsen">
      <organization>Watsen Networks</organization>
      <address>
        <email>kent+ietf@watsen.net</email>
      </address>
    </author>

    <date day="16" month="November" year="2020"/>
    <area>Routing</area>
    <workgroup>NETCONF</workgroup>
    <keyword>http</keyword>
    <keyword>yang</keyword>
    <keyword>notification</keyword>

    <abstract>
      <t>This document defines a YANG data module for configuring HTTPS based
      configured subscription, as defined in RFC 8639. The use of HTTPS
      maximizes transport-level interoperability, while allowing for encoding
      selection from text, e.g. XML or JSON, to binary.</t>
    </abstract>
  </front>

  <middle>
    <section anchor="intro" title="Introduction">
      <t><xref target="RFC8639">Subscription to YANG Notifications</xref>
      defines a YANG data module for configuring subscribed notifications. It
      defines a "subscriptions" container that contains a list of receivers,
      but it defers the configuration and management of those receivers to
      other documents. This document defines two <xref target="RFC7950">YANG
      1.1 </xref> data modules, one for augmenting the <xref
      target="RFC8639">Subscription to YANG Notifications</xref> to add a
      transport type, and another for configuring and managing HTTPS based
      receivers for the notifications.</t>

      <t>The first module allows for different transports to be configured for
      the same receiver instance. The second module describes how to enable
      the transmission of YANG modeled notifications, in the configured
      encoding (i.e., XML, JSON) over HTTPS. Notifications are delivered in
      the form of a HTTPS POST. The use of HTTPS maximizes transport-level
      interoperability, while the encoding selection pivots between
      implementation simplicity (XML, JSON) and throughput (text versus
      binary).</t>

      <t>Configured subscriptions enable a server, acting as a publisher of
      notifications, to proactively push notifications to external receivers
      without the receivers needing to first connect to the server, as is the
      case with dynamic subscriptions.</t>

      <section title="Applicability Statement">
        <t>While the YANG modules have been defined as an augmentation of
        <xref target="RFC8639">Subscription to YANG Notifications</xref>, the
        notification method defined in this document MAY be used outside of
        <xref target="RFC8639">Subscription to YANG Notifications</xref> by
        using some of the definitions from this module along with the grouping
        defined in <xref
        target="I-D.ietf-netconf-http-client-server">Groupings for HTTP
        Clients and Servers</xref>. For an example on how that can be done,
        see Section 8.2.</t>
      </section>

      <section title="Note to RFC Editor">
        <t>This document uses several placeholder values throughout the
        document. Please replace them as follows and remove this section
        before publication.</t>

        <t>RFC XXXX, where XXXX is the number assigned to this document at the
        time of publication.</t>

        <t>YYYY-MM-DD with the actual date of the publication of this
        document.</t>
      </section>

      <section title="Abbreviations">
        <texttable>
          <ttcol>Acronym</ttcol>

          <ttcol>Expansion</ttcol>

          <c>HTTP</c>

          <c>Hyper Text Transport Protocol</c>

          <c>HTTPS</c>

          <c>Hyper Text Transport Protocol Secure</c>

          <c>TCP</c>

          <c>Transmission Control Protocol</c>

          <c>TLS</c>

          <c>Transport Layer Security</c>
        </texttable>
      </section>

      <section title="Terminology">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
        "OPTIONAL" in this document are to be interpreted as described in BCP
        14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only
        when, they appear in all capitals, as shown here.</t>

        <section title="Subscribed Notifications">
          <t>The following terms are defined in <xref
          target="RFC8639">Subscription to YANG Notifications</xref>.</t>

          <t><list style="symbols">
              <t>Subscribed Notifications</t>
            </list></t>
        </section>
      </section>

      <section title="Receiver and Publisher Interaction">
        <t>The interaction between the receiver and the publisher can be a
        single notification with a response or of type "pipelining" where
        multiple notifications as sent part of a single message.</t>

        <section title="Single Notification">
          <t>With a single notification, the interfaction between the receiver
          and the publisher would look something like this.</t>

          <t><figure>
              <artwork><![CDATA[       -------------                               --------------
       | Publisher |                               | Receiver   |
       -------------                               --------------

       Establish TCP             ------>

       Establish TLS             ------>

       Send HTTPS POST message
       with <subscription-       ------>
       started> notification

                                 <------          Send 200 (OK) for
                                                  <subscription-started>

       Send HTTPS POST message 
       with YANG defined         ------>
       notification

                                 <------         Send 204 (No Content)
                                                 for notification]]></artwork>
            </figure></t>

          <t>The content of the message would look something like this:</t>

          <figure>
            <artwork><![CDATA[Request:

    POST /restconf/operations/ietf−notif-receiver−https:relay−notification HTTP/1.1
    Host: my-receiver.my-domain.com
    Content-Type: application/yang-data+xml

    <notification
      xmlns="urn:ietf:params:xml:ns:netconf:notification:1.0">
      <eventTime>2019-03-22T12:35:00Z</eventTime>
      <foo xmlns="https://example.com/my-foobar-module">
        ...
      </foo>
    </notification>

Response:

      HTTP/1.1 204 No Content
      Date: Fri, 03 Mar 2019 12:35:00 GMT
      Server: my-receiver.my-domain.com

]]></artwork>
          </figure>
        </section>

        <section title="Pipelining of Notifications">
          <t>In the case of "pipelining", the flow of messages would look
          something like this. This example shows the flow assuming that
          Subscribed Notifications is used and therefore a
          &lt;subscription-started&gt; notification is sent before sending the
          first notification. The example would be the same for when
          Subscribed Notification is not used by removing the first POST
          message for &lt;susbscription-started&gt;.</t>

          <t><figure>
              <artwork><![CDATA[       -------------                               --------------
       | Publisher |                               | Receiver   |
       -------------                               --------------

       Establish TCP             ------>

       Establish TLS             ------>

       Send HTTPS POST message
       with <subscription-       ------>
       started> notification

                                                  Send 200 (OK) for
                                 <------          <subscription-started>

       Send HTTPS POST message 
       with YANG defined         ------>
       notification #1

       Send HTTPS POST message
       with YANG defined         ------>
       notification #2
                                                 Send 204 (No Content)
                                 <------         for notification #1
 
                                                 Send 204 (No Content)
                                 <------         for notification #2

       Send HTTPS POST message
       with YANG defined         ------->
       notification #3

                                                 Send 204 (No Content)
                                 <------         for notification #3]]></artwork>
            </figure></t>

          <t>The content of the exchange would look something like this.</t>

          <figure>
            <artwork><![CDATA[Request:

    POST /restconf/operations/ietf−notif-receiver−https:relay−notification HTTP/1.1
    Host: my-receiver.my-domain.com
    Content-Type: application/yang-data+xml

    <notification
      xmlns="urn:ietf:params:xml:ns:netconf:notification:1.0">
      <eventTime>2019-03-22T12:35:00Z</eventTime>
      <foo xmlns="https://example.com/my-foobar-module">
        ...
      </foo>
    </notification>

    POST /restconf/operations/ietf−notif-receiver−https:relay−notification HTTP/1.1
    Host: my-receiver.my-domain.com
    Content-Type: application/yang-data+xml

    <notification
      xmlns="urn:ietf:params:xml:ns:netconf:notification:1.0">
      <eventTime>2019-03-22T12:35:00Z</eventTime>
      <bar xmlns="https://example.com/my-foobar-module">
        ...
      </bar>
    </notification>

    POST /restconf/operations/ietf−notif-receiver−https:relay−notification HTTP/1.1
    Host: my-receiver.my-domain.com
    Content-Type: application/yang-data+xml

    <notification
      xmlns="urn:ietf:params:xml:ns:netconf:notification:1.0">
      <eventTime>2019-03-22T12:35:01Z</eventTime>
      <baz xmlns="https://example.com/my-foobar-module">
        ...
      </baz>
    </notification>


Response:

      HTTP/1.1 204 No Content
      Date: Fri, 03 Mar 2019 12:35:00 GMT
      Server: my-receiver.my-domain.com

      HTTP/1.1 204 No Content
      Date: Fri, 03 Mar 2019 12:35:00 GMT
      Server: my-receiver.my-domain.com

      HTTP/1.1 204 No Content
      Date: Fri, 03 Mar 2019 12:35:01 GMT
      Server: my-receiver.my-domain.com]]></artwork>
          </figure>
        </section>
      </section>
    </section>

    <section title="Learning Receiver Capabilities">
      <section title="Introduction">
        <t>To learn the capabilities of the receiver, the publisher can issue
        a HTTPS GET request with Accept-Type set to application/yang-data+xml
        or application/yang-data+json, with latter as the mandatory to
        implement, and the default in case the type is not specified.</t>

        <t>Please note that, when used in conjunction with <xref
        target="RFC8639">Subscription to YANG Notifications</xref>, dynamic
        discovery of the receiver&rsquo;s supported encoding is considered
        only when the "/subscriptions/subscription/encoding&rdquo; leaf is not
        configured, per the &ldquo;encoding&rdquo; leaf&rsquo;s description
        statement.</t>
      </section>

      <section title="Example">
        <t>The publisher can send the following request to learn the receiver
        capabilities. The Accept-Type states its preferred order for
        Content-Type that it wants to receive starting with XML, and if not
        supported, to use JSON encoding. Currently, there is only one
        capability of binary encoding defined.</t>

        <t><figure>
            <artwork><![CDATA[GET /restconf/data/ietf−notif-receiver−https:receiver-capabilities HTTP/1.1
Host: example.com
Accept-Type: application/yang-data+xml, application/yang-data+json]]></artwork>
          </figure></t>

          <t>In case the receiver supports &lt;application/yang-data+xml&gt;, its response
        might look like this:</t>

        <t><figure>
            <artwork><![CDATA[HTTP/1.1 200 OK
Date: Wed, 26 Feb 2020 20:33:30 GMT
Server: example-server
Cache-Control: no-cache
Content-Type: application/yang-data+xml
Content-Length: nnn

<receiver-capabilities xmlns:nrh="urn:ietf:params:https-config:capability:encoding-xml:1.0">
  <receiver-capability>json-encoding</receiver-capability>
  <receiver-capability>xml-encoding</receiver-capability>
</receiver-capabilities>]]></artwork>
          </figure></t>

          <t>Otherwise, its response might look like this:</t>
        <t>FIXME</t>
        <t><figure>
            <artwork><![CDATA[HTTP/1.1 200 OK
Date: Wed, 26 Feb 2020 20:33:30 GMT
Server: example-server
Cache-Control: no-cache
Content-Type: application/yang-data+json
Content-Length: nnn

{
   ietf-notif-receiver-https:receiver-capabilities {
      "receiver-capability": [ "json-encoding", "json-encoding" ]
   }
}]]></artwork>
          </figure></t>
      </section>
    </section>

    <section title="The &quot;ietf-notif-publisher-list&quot; Module">
      <section title="Data Model Overview">
        <t>This YANG module augments ietf-subscribed-notifications module to
        define a choice of transport types that other modules such as the
        ietf-notif-publisher-https module can use to define a transport specific
        receiver.</t>

        <t><figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../bin/ietf-notif-publisher-list@YYYY-MM-DD-tree.txt)

]]></artwork>
          </figure></t>
      </section>

      <section title="YANG Module">
        <t><figure>
            <artwork><![CDATA[
<CODE BEGINS> file "ietf-notif-publisher-list@YYYY-MM-DD.yang"
INSERT_TEXT_FROM_FILE(../bin/ietf-notif-publisher-list@YYYY-MM-DD.yang)
<CODE ENDS>

]]></artwork>
          </figure></t>
      </section>
    </section>

    <section title="The &quot;ietf-notif-receiver-https&quot; Module">
      <section title="Data Model Overview">
        <t>This YANG module provide a &lt;config false&gt; data node called 
          &lt;receiver-capabilities&gt; and an RPC called &lt;relay-notification&gt;.</t>

        <t>A publisher can learn what optional capabilities a receiver supports
          by issuing a GET request on the &lt;receiver-capabilities&gt; data node.</t>

        <t>A publisher can send a notification to the receiver using the
          &lt;relay-notification&gt; RPC.</t>

        <t>An abridged tree diagram representing the module is show below.</t>

        <t><figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../bin/ietf-notif-receiver-https@YYYY-MM-DD-sub-tree.txt)

]]></artwork>
          </figure></t>
      </section>

      <section title="YANG module">
        <t>The YANG module imports <xref target="RFC6991">Common YANG Data
        Types</xref>.</t>

        <t>The YANG module is shown below.</t>

        <t><figure>
            <artwork><![CDATA[
<CODE BEGINS> file "ietf-notif-receiver-https@YYYY-MM-DD.yang"
INSERT_TEXT_FROM_FILE(../bin/ietf-notif-receiver-https@YYYY-MM-DD.yang)
<CODE ENDS>

]]></artwork>
          </figure></t>
      </section>
    </section>

    <section anchor="overview" title="The &quot;ietf-notif-publisher-https&quot; Module">
      <section anchor="overview.protocol" title="Data Model Overview">
        <t>This YANG module is a definition of a set of receivers that are
        interested in the notifications published by the publisher. The module
        contains the TCP, TLS and HTTPS parameters that are needed to
        communicate with the receiver. The module augments the
        ietf-notif-publisher-list module to define a transport specific
        receiver. As mentioned earlier, it uses POST method to deliver the
        notification. The attribute 'path' defines the path for the resource
        on the receiver, as defined by 'path-absolute' in <xref
        target="RFC3986">URI Generic Syntax</xref>. The user-id used by <xref
        target="RFC8341">Network Configuration Access Control Model</xref>, is
        that of the receiver and is derived from the certificate presented by
        the receiver as part of 'receiver-identity'.</t>

        <t>An abridged tree diagram representing the module is shown
        below.</t>

        <figure>
          <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../bin/ietf-notif-publisher-https@YYYY-MM-DD-sub-tree.txt)

]]></artwork>
        </figure>
      </section>

      <section title="YANG module">
        <t>The YANG module imports <xref target="RFC6991">Common YANG Data
        Types</xref>, <xref target="RFC7407">A YANG Data Model for SNMP
        Configuration</xref>, <xref target="RFC7951">JSON Encoding of Data
        Modeled with YANG</xref>, and <xref target="RFC8639">Subscription to
        YANG Notifications</xref>.</t>

        <t>The YANG module is shown below.</t>

        <figure>
          <artwork><![CDATA[
<CODE BEGINS> file "ietf-notif-publisher-https@YYYY-MM-DD.yang"
INSERT_TEXT_FROM_FILE(../bin/ietf-notif-publisher-https@YYYY-MM-DD.yang)
<CODE ENDS>

]]></artwork>
        </figure>
      </section>
    </section>

    <section title="Security Considerations">
      <t>The YANG module specified in this document defines a schema for data
      that is designed to be accessed via network management protocols such as
      <xref target="RFC6241">NETCONF</xref> or <xref
      target="RFC8040">RESTCONF</xref>. The lowest NETCONF layer is the secure
      transport layer, and the mandatory-to-implement secure transport is
      <xref target="RFC6242">Secure Shell (SSH)</xref>. The lowest RESTCONF
      layer is HTTPS, and the mandatory-to-implement secure transport is <xref
      target="RFC8446">TLS</xref>. The <xref target="RFC8341">NETCONF Access
      Control Model (NACM) </xref> provides the means to restrict access for
      particular NETCONF or RESTCONF users to a preconfigured subset of all
      available NETCONF or RESTCONF protocol operations and content.</t>

      <t>The YANG module in this document makes use of grouping that are
      defined in <xref target="I-D.ietf-netconf-http-client-server">YANG
      Groupings for HTTP Clients and HTTP Servers</xref>, and <xref
      target="RFC7407">A YANG Data Model for SNMP Configuration</xref>. Please
      see the Security Considerations section of those documents for
      considerations related to sensitivity and vulnerability of the data
      nodes defined in them.</t>

      <t>There are a number of data nodes defined in this YANG module that are
      writable/creatable/deletable (i.e., config true, which is the default).
      These data nodes may be considered sensitive or vulnerable in some
      network environments. Write operations (e.g., edit-config) to these data
      nodes without proper protection can have a negative effect on network
      operations. These are the subtrees and data nodes and their
      sensitivity/vulnerability:</t>

      <t><list style="symbols">
          <t>The 'path' node in ietf-notif-publisher-https module can be modified by a
          malcious user to point to an invalid URI.</t>
        </list></t>

      <t>Some of the readable data nodes in YANG module may be considered
      sensitive or vulnerable in some network environments. It is thus
      important to control read access (e.g., via get, get-config, or
      notification) to these data nodes. The model does not define any
      readable subtrees and data nodes.</t>

      <t>Some of the RPC operations in YANG module may be considered sensitive
      or vulnerable in some network environments. It is thus important to
      control access to these operations. The model does not define any RPC
      operations.</t>
    </section>

    <section title="Receiving Event Notifications">
<!--
      <t>Encoding notifications for the HTTPS notifications is the same as the
      encoding notifications as defined in <xref target="RFC8040">RESTCONF
      </xref> Section 6.4, with the following changes. Instead of saying that
      for JSON-encoding purposes, the module name for "notification" element
      will be "ietf-restconf, it will say that for JSON-encoding purposes, the
      module name for "notification" element will be "ietf-notif-publisher-https".</t>

      <t>With those changes, the SSE event notification encoded JSON example
      that would be sent over the HTTPS notif transport would appear as
      follows:</t>

      <t><figure>
          <artwork><![CDATA[      data: {
      data:   "ietf-notif-publisher-https:notification" : {
      data:     "eventTime" : "2013-12-21T00:01:00Z",
      data:     "example-mod:event" : {
      data:       "event-class" : "fault",
      data:       "reporting-entity" : { "card" : "Ethernet0" },
      data:       "severity" : "major"
      data:     }
      data:   }
      data: }]]></artwork>
        </figure></t>
-->
      <t>FIXME</t>
      <t><figure>
          <artwork><![CDATA[{
  ”ietf−notif−receiver-https:input” : {
     ”ietf-restconf:notification ”: {
      ”eventTime”: ”2013-12-21T00:01:00Z",
      "example-mod:event" : {
        "event-class" : "fault",
        "reporting-entity" : { "card" : "Ethernet0" },
        "severity" : "major"
      }
    }
  }
}]]></artwork>
        </figure></t>

      <t>FIXME</t>
      <t><figure>
          <artwork><![CDATA[<input xmlns="urn:ietf:params:xml:ns:yang:ietf-notif-receiver-https">
  <notification xmlns="urn:ietf:params:xml:ns:netconf:notification:1.0">
    <eventTime>2019-03-22T12:35:00Z</eventTime>
    <event xmlns="https://example.com/example-mod">
      <event-class>fault</fault>
      <reporting-entity>
        <card>Ethernet0</card>
      </reporting-entity>
      <severity>major</severity>
    </event>
  </notification>
</input>]]></artwork>
        </figure></t>

    </section>

    <section title="IANA Considerations">
      <t>This document registers two URI, two YANG module and two Media
      Types.</t>

      <section title="URI Registration">
        <t>in the <xref target="RFC3688">IETF XML registry</xref>. Following
        the format in RFC 3688, the following registration is requested to be
        made: <figure>
            <artwork><![CDATA[URI: urn:ietf:params:xml:ns:yang:ietf-http-notif
URI: urn:ietf:params:xml:ns:yang:ietf-notif-publisher-list]]></artwork>
          </figure></t>

        <t>Registrant Contact: The IESG. XML: N/A, the requested URI is an XML
        namespace.</t>
      </section>

      <section title="YANG Module Name Registration">
        <t>This document registers one YANG module in the YANG Module Names
        registry <xref target="RFC6020">YANG</xref>.</t>

        <t><figure>
            <artwork><![CDATA[name: ietf-notif-publisher-https
namespace: urn:ietf:params:xml:ns:yang:ietf-notif-publisher-https
prefix: hn
reference: RFC XXXX

name: ietf-sub-recv-list
namespace: urn:ietf:params:xml:ns:yang:ietf-notif-publisher-list
prefix: snrl
reference: RFC XXXX
]]></artwork>
          </figure></t>
      </section>
    </section>

    <section title="Examples">
      <t>This section shows some examples in how the module can be used.</t>

      <section title="Subscribed Notification based Configuration">
        <t>This example shows how a HTTPS client can be configured to send
        notifications to a receiver at address 192.0.2.1, port 443, a 'path',
        with server certificates, and the corresponding trust store that is
        used to authenticate a connection.</t>

        <t><figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../src/yang/example-https-notif-7.1.xml,68)

]]></artwork>
          </figure></t>
      </section>

      <section title="Non Subscribed Notification based Configuration">
        <t>In the case that it is desired to use HTTPS notif outside of
        Subscribed Notifications, there would have to be a module to define
        the configuration for where and how to send the notification, such as
        the following:</t>

        <t><figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../bin/example-custom-module@YYYY-MM-DD.yang,68)

]]></artwork>
          </figure></t>

        <t>This example shows how a HTTPS client can be configured to send
        notifications to a receiver at address 192.0.2.1, port 443, a 'path',
        with server certificates, and the corresponding trust store that is
        used to authenticate a connection.</t>

        <t><figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../src/yang/example-custom-https-notif.xml,68)

]]></artwork>
          </figure></t>
      </section>

      <section title="Bundled Message">
        <t>In the case of "bundled-message" as defined in <xref
        target="I-D.ietf-netconf-notification-messages">Notification Message
        Headers and Bundles</xref>, something that this module supports, the
        flow of messages would look something like this.</t>

        <t><figure>
            <artwork><![CDATA[       -------------                               --------------
       | Publisher |                               | Receiver   |
       -------------                               --------------
       Establish TCP               ------>
       Establish TLS               ------>
       Send HTTPS POST message     ------>
       with bundled-message      
                                   <------         Send 204 (No Content)
                                                   for bundled-message]]></artwork>
          </figure></t>

        <t>The content of the exchange would look something like this.</t>

        <figure>
          <artwork><![CDATA[Request:
    POST /restconf/operations/ietf−notif-receiver−https:relay−notification HTTP/1.1
      <or, if supporting NMDA>
    POST /restconf/ds/ietf−datastores:operational/ietf−notif-receiver−https:relay−notification HTTP/1.1
    Host: my-receiver.my-domain.com
    Content-Type: application/yang-data+xml
    <bundled-message
     xmlns="urn:ietf:params:xml:ns:yang:ietf-notification-messages:1.0">
     <message-header>
       <message-time>2017-02-14T00:00:05Z</message-time>
       <message-id>456</message-id>
       <notification-count>2</notification-count>
     </message-header>
     <notifications>
       <notification-header>
         <notification-time>2017-02-14T00:00:02Z</notification-time>
         <subscription-id>823472</subscription-id>
         <yang-module>ietf-yang-push</yang-module>
         <yang-notification-name>push-change-update</yang-notification-name>
       </notification-header>
       <notification-contents>
         <push-change-update xmlns=
           "urn:ietf:params:xml:ns:yang:ietf-yang-push:1.0">
           <datastore-changes-xml>
             <alpha xmlns="http://example.com/sample-data/1.0">
                <beta urn:ietf:params:xml:ns:netconf:base:1.0:
                    operation="delete"/>
             </alpha>
           </datastore-changes-xml>
         </push-change-update>
       </notification-contents>
       <notification-header>
             ...(notification header, contents, footer)...
       </notification-footer>
     </notifications>
   </bundled-message>

Response:
      HTTP/1.1 204 No Content
      Date: Fri, 03 Mar 2019 12:35:00 GMT
      Server: my-receiver.my-domain.com
      HTTP/1.1 204 No Content
      Date: Fri, 03 Mar 2019 12:35:00 GMT
      Server: my-receiver.my-domain.com
      HTTP/1.1 204 No Content
      Date: Fri, 03 Mar 2019 12:35:01 GMT
      Server: my-receiver.my-domain.com]]></artwork>
        </figure>
      </section>
    </section>

    <section title="Contributors">
      <t/>
    </section>

    <section title="Acknowledgements">
      <t/>
    </section>
  </middle>

  <back>
    <references title="Normative references">
      <?rfc include='reference.RFC.2119'?>

      <?rfc include='reference.RFC.3688'?>

      <?rfc include='reference.RFC.3986'?>

      <?rfc include='reference.RFC.6020'?>

      <?rfc include='reference.RFC.6241'?>

      <?rfc include='reference.RFC.6242'?>

      <?rfc include='reference.RFC.6991'?>

      <?rfc include='reference.RFC.7407'?>

      <?rfc include='reference.RFC.7950'?>

      <?rfc include='reference.RFC.7951'?>

      <?rfc include='reference.RFC.8040'?>

      <?rfc include='reference.RFC.8174'?>

      <?rfc include='reference.RFC.8341'?>

      <?rfc include='reference.RFC.8446'?>

      <?rfc include='reference.RFC.8639'?>

      <?rfc include='reference.I-D.ietf-netconf-notification-messages'
?>

      <?rfc include='reference.I-D.ietf-netconf-http-client-server'?>
    </references>
  </back>
</rfc>
