<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<rfc category="std" docName="draft-ietf-netconf-https-notif-06"
     ipr="trust200902">
  <?rfc toc="yes"?>

  <front>
    <title abbrev="HTTPS-based Notification Transport">An HTTPS-based Transport for
    Configured Subscriptions</title>

    <author fullname="Mahesh Jethanandani" initials="M.J." surname="Jethanandani">
      <organization>Kloud Services</organization>
      <address>
        <email>mjethanandani@gmail.com</email>
      </address>
    </author>

    <author fullname="Kent Watsen" initials="K.W." surname="Watsen">
      <organization>Watsen Networks</organization>
      <address>
        <email>kent+ietf@watsen.net</email>
      </address>
    </author>

    <date day="16" month="November" year="2020"/>
    <area>Routing</area>
    <workgroup>NETCONF</workgroup>
    <keyword>http</keyword>
    <keyword>yang</keyword>
    <keyword>notification</keyword>

    <abstract>
      <t>This document defines both a protocol for sending notifications
        over HTTPS as well as extensions to the data model for configured
        subscriptions defined in RFC 8639.  It also presents an example
        module for configuration without using the data model defined in
        RFC 8639.</t>
      <t>This document requires that the publisher is a "server" (e.g.,
        a NETCONF or RESTCONF server), but does not assume that the
        receiver is a server.</t>
    </abstract>
  </front>

  <middle>
    <section anchor="intro" title="Introduction">
      <t>This document defines a protocol for sending notifications over
        HTTPS.  Using HTTPS maximizes transport-level interoperability,
        while allowing for a variety of encoding options.  This document
        defines support for JSON and XML; future efforts may define support
        for other encodings (e.g., binary).</t>
      <t>This document also defines two <xref target="RFC7950">YANG 1.1</xref>
        modules that extend the data model defined in
        <xref target="RFC8639">Subscription to YANG Notifications</xref>,
        enabling the configuration of HTTPS-based receivers.</t>
      <t>An example module illustrating the configuration of a publisher
        not using the data model defined in RFC 8639 is also provided.</t>
      <t>Configured subscriptions enable a server, acting as a publisher of
        notifications, to proactively push notifications to external receivers
        without the receivers needing to first connect to the server, as is the
        case with dynamic subscriptions.</t>

      <section title="Applicability Statement">
        <t>While the YANG modules have been defined as an augmentation of
        <xref target="RFC8639">Subscription to YANG Notifications</xref>, the
        notification method defined in this document MAY be used outside of
        <xref target="RFC8639">Subscription to YANG Notifications</xref> by
        using some of the definitions from this module along with the grouping
        defined in <xref
        target="I-D.ietf-netconf-http-client-server">Groupings for HTTP
        Clients and Servers</xref>. For an example on how that can be done,
        see Section 8.2.</t>
      </section>

      <section title="Note to RFC Editor">
        <t>This document uses several placeholder values throughout the
          document. Please replace them as follows and remove this section
          before publication.</t>
        <t>RFC XXXX, where XXXX is the number assigned to this document at the
          time of publication.</t>
        <t>RFC YYYY, where YYYY is the number assigned to
        <xref target="I-D.ietf-netconf-http-client-server"/>.</t>
        <t>YYYY-MM-DD with the actual date of the publication of this document.</t>
      </section>

      <section title="Abbreviations">
        <texttable>
          <ttcol>Acronym</ttcol>
          <ttcol>Expansion</ttcol>
          <c>HTTP</c>
          <c>Hyper Text Transport Protocol</c>
          <c>HTTPS</c>
          <c>Hyper Text Transport Protocol Secure</c>
          <c>TCP</c>
          <c>Transmission Control Protocol</c>
          <c>TLS</c>
          <c>Transport Layer Security</c>
        </texttable>
      </section>

      <section title="Terminology">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
        "OPTIONAL" in this document are to be interpreted as described in BCP
        14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only
        when, they appear in all capitals, as shown here.</t>

        <section title="Subscribed Notifications">
          <t>The following terms are defined in <xref target="RFC8639">Subscription
            to YANG Notifications</xref>.</t>
          <t><list style="symbols">
              <t>Subscribed Notifications</t>
            </list></t>
        </section>
      </section>



      <section title="Publisher to Receiver Interaction">

        <t>The protocol consists of two HTTP-based target resources presented by the receiver:
          <list style="symbols">
            <t>A target resource enabling the publisher to discover what optional 
              capabilities a receiver supports.  Publishers SHOULD query this target
              when before sending any notifications or if ever an error occurs.</t>
            <t>A target resource enabling to publish to send one or more notification
              to a receiver.  This document defines support for sending only one
              notication per message; a future effort MAY extend the protocol to
              send multiple notifications per message.</t>
          </list>
        </t>
        <t>The protocol is illustrated in the diagram below:</t>
        <t>
          <figure>
            <artwork><![CDATA[
            -------------                      --------------
            | Publisher |                      | Receiver   |
            -------------                      --------------

       Send HTTPS GET message    ------>
       to discover receiver's
       capabilities

                                 <------    Send 200 (OK) containing
                                            capabilities supported
                                            by the receiver      


  +-- For Each Notification ----------------------------------------+
  |                                                                 |
  |    Send HTTPS POST message   ------>                            |
  |    with YANG defined                                            |
  |    notification                                                 |
  |                                                                 |
  |                              <------    Send 204 (No Content)   |
  +-----------------------------------------------------------------+]]></artwork>
          </figure>
        </t>
        <t>Note that, for RFC 8639 configured subscriptions, the very first
          notification must be the "subscription-started" notification.</t>
        <t>The POST messages MAY be "pipelined" (not illustrated in the
          diagram above), whereby multiple notifications are sent without
          waiting for the HTTP part of a single message.</t>
      </section>
    </section>

    <section title="Discovering a Receiver's Capabilities">
      <section title="Applicability">
        <t>For publishers using <xref target="RFC8639">Subscription to YANG
          Notifications</xref>, dynamic discovery of a receiver's supported
          encoding is neccessary only when the "/subscriptions/subscription/encoding"
          leaf is not configured, per the "encoding" leaf's description statement
          in the "ietf-subscribed-notification" module.  FIXME: do they need
          to discover *any* capabilities?</t>
      </section>
      <section title="Request">
        <t>To learn the capabilities of a receiver, a publisher can issue an
          HTTPS GET request to the "capabilities" resource under a known path on
          the receiver with "Accept-Type" header set using the "application/xml"
          and/or "application/json" media-types, with latter as the mandatory
          to implement, and the default in case the type is not specified.</t>
      </section>
      <section title="Response">
        <t>The receiver responds with a "200 (OK)" message, having the
          "Content-Type" header set to either "application/xml" or
          "application/json" (which ever was selected), and containing
          in the response body a list of the receiver's capabilites
          encoded in the selected format.</t>
        <t>Even though a YANG module is not defined for this interaction,
          the response body MUST conform to the following YANG-modeled
          format:</t>
        <t>
          <figure>
            <artwork>container receiver-capabilities {
  description
    "A container for a list of capabilities supported by
     the receiver.";
  leaf-list receiver-capablity {
    type string {
      pattern "urn:ietf:capability:receiver:notification:https:*";
    }
    description
      "A capability supported by the receiver.  A full list of
       capabilities is defined in the 'Capabilities for HTTPS
       Notification Receivers' registry (see RFC XXXX).";
  }
}
            </artwork>
          </figure>
        </t>
      </section>
      <section title="Example">
        <t>The publisher can send the following request to learn the receiver
          capabilities. In this example, the "Accept-Type" states that the
          receiver wants to receive notifications in XML but, if not
          supported, to use JSON encoding.</t>
        <t>
          <figure>
            <artwork><![CDATA[GET /some/path/capabilities HTTP/1.1
Host: example.com
Accept-Type: application/xml, application/json]]></artwork>
          </figure>
        </t>
        <t>If the receiver is able to reply using &lt;application/xml&gt;, and
          assuming it is able to receive JSON and XML encoded notifications, the
          response might look like this:</t>
        <t>
          <figure>
            <artwork><![CDATA[HTTP/1.1 200 OK
Date: Wed, 26 Feb 2020 20:33:30 GMT
Server: example-server
Cache-Control: no-cache
Content-Type: application/yang-data+xml
Content-Length: nnn

<receiver-capabilities>
  <receiver-capability>urn:ietf:capability:receiver:notification:https:encoding:json</receiver-capability>
  <receiver-capability>urn:ietf:capability:receiver:notification:https:encoding:xml</receiver-capability>
</receiver-capabilities>]]></artwork>
          </figure>
        </t>
        <t>If the receiver is unable to reply using &lt;application/xml&gt;, the
        response might look like this:</t>
        <t>
          <figure>
            <artwork><![CDATA[HTTP/1.1 200 OK
Date: Wed, 26 Feb 2020 20:33:30 GMT
Server: example-server
Cache-Control: no-cache
Content-Type: application/yang-data+json
Content-Length: nnn

{
   receiver-capabilities {
     "receiver-capability": [
       "urn:ietf:capability:receiver:notification:https:encoding:json",
       "urn:ietf:capability:receiver:notification:https:encoding:json"
     ]
   }
}]]></artwork>
          </figure>
        </t>
      </section>
    </section>

    <section title="Sending Event Notifications"> 
      <section title="Request">
        <t>The publisher sends an HTTPS POST request to the "relay-notifications"
          resource under a known path on the receiver with the "Content-Type"
          header set to either "application/json" or "application/xml" and a
          request body containing the notification encoded using the specified
          format.</t>
        <t>XML-encoded notifications are encoded using the format defined
          by <xref target="RFC5277">NETCONF Event Notifications</xref>
          for XML.</t>
        <t>JSON-encoded notifications are encoded the same as specified
          in Section 6.4 in <xref target="RFC8040">RESTCONF</xref> with
          the following deviations:
          <list style="symbols">
            <t>The notifications do not contain the "data:" prefix used by SSE.</t>
            <t>Instead of saying that, for JSON-encoding purposes, the module
              name for the "notification" element is "ietf-restconf, the module
              name will instead by "ietf-https-notif".</t>
          </list>
        </t>
      </section>
      <section title="Response">
        <t>The response should be "204 (No Content)".</t>
      </section>
      <section title="Example">
        <t>An XML-encoded notification might be sent as follows:</t>
        <t>
          <figure>
            <artwork><![CDATA[GET /some/path/relay-notification HTTP/1.1
Host: example.com
Accept-Type: application/xml

<notification xmlns="urn:ietf:params:xml:ns:netconf:notification:1.0">
  <eventTime>2019-03-22T12:35:00Z</eventTime>
  <event xmlns="https://example.com/example-mod">
    <event-class>fault</fault>
    <reporting-entity>
      <card>Ethernet0</card>
    </reporting-entity>
    <severity>major</severity>
  </event>
</notification>]]></artwork>
          </figure>
        </t>
        <t>A JSON-encoded notification might be sent as follows:</t>
        <t><figure>
            <artwork><![CDATA[GET /some/path/relay-notification HTTP/1.1
Host: example.com
Accept-Type: application/json

{
  "ietf-https-notif:notification": {
    "eventTime": "2013-12-21T00:01:00Z",
    "example-mod:event" : {
      "event-class" : "fault",
      "reporting-entity" : { "card" : "Ethernet0" },
      "severity" : "major"
    }
  }
}]]></artwork>
          </figure>
        </t>

        <t>And, in either case, the response might be as follows:</t>
        <t>
          <figure>
            <artwork><![CDATA[HTTP/1.1 204 No Content
Date: Wed, 26 Feb 2020 20:33:30 GMT
Server: example-server]]></artwork>
          </figure>
        </t>
      </section>
    </section>

    <section title='The "ietf-subscribed-notif-ext" Module'>
      <section title="Data Model Overview">
        <t>This YANG module augments "ietf-subscribed-notifications" module to
        define a choice of transport types that other modules such as the
        "ietf-subscribed-notif-ext" module can use to define a transport specific
        receiver.</t>
        <t>
          <figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../bin/ietf-subscribed-notif-ext@YYYY-MM-DD-tree.txt)
]]></artwork>
          </figure>
        </t>
      </section>
      <section title="YANG Module">
        <t>
          <figure>
            <artwork><![CDATA[
<CODE BEGINS> file "ietf-subscribed-notif-ext@YYYY-MM-DD.yang"
INSERT_TEXT_FROM_FILE(../bin/ietf-subscribed-notif-ext@YYYY-MM-DD.yang)
<CODE ENDS>

]]></artwork>
          </figure>
        </t>
      </section>
    </section>

    <section title='The "ietf-https-notif-transport" Module'>
      <section title="Data Model Overview">
        <t>This YANG module is a definition of a set of receivers that are
        interested in the notifications published by the publisher. The module
        contains the TCP, TLS and HTTPS parameters that are needed to
        communicate with the receiver. The module augments the
        ietf-https-notif-transport module to define a transport specific
          receiver. </t>
        <t>As mentioned earlier, it uses POST method to deliver the
        notification. The attribute 'path' defines the path for the resource
        on the receiver, as defined by 'path-absolute' in <xref
        target="RFC3986">URI Generic Syntax</xref>. The user-id used by <xref
        target="RFC8341">Network Configuration Access Control Model</xref>, is
        that of the receiver and is derived from the certificate presented by
        the receiver as part of 'receiver-identity'.</t>

        <t>An abridged tree diagram representing the module is shown
        below.</t>
        <t>
          <figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../bin/ietf-https-notif-transport@YYYY-MM-DD-sub-tree.txt)
]]></artwork>
          </figure>
        </t>
      </section>

      <section title="YANG module">
        <t>The YANG module imports <xref target="RFC6991">Common YANG Data
        Types</xref>, <xref target="RFC7407">A YANG Data Model for SNMP
        Configuration</xref>, <xref target="RFC7951">JSON Encoding of Data
        Modeled with YANG</xref>, and <xref target="RFC8639">Subscription to
        YANG Notifications</xref>.</t>

        <t>The YANG module is shown below.</t>

        <t>
          <figure>
            <artwork><![CDATA[
<CODE BEGINS> file "ietf-https-notif-transport@YYYY-MM-DD.yang"
INSERT_TEXT_FROM_FILE(../bin/ietf-https-notif-transport@YYYY-MM-DD.yang)
<CODE ENDS>
]]></artwork>
          </figure>
        </t>
      </section>
    </section>

    <section title="Security Considerations">
      <t>The YANG module specified in this document defines a schema for data
      that is designed to be accessed via network management protocols such as
      <xref target="RFC6241">NETCONF</xref> or <xref
      target="RFC8040">RESTCONF</xref>. The lowest NETCONF layer is the secure
      transport layer, and the mandatory-to-implement secure transport is
      <xref target="RFC6242">Secure Shell (SSH)</xref>. The lowest RESTCONF
      layer is HTTPS, and the mandatory-to-implement secure transport is <xref
      target="RFC8446">TLS</xref>. The <xref target="RFC8341">NETCONF Access
      Control Model (NACM) </xref> provides the means to restrict access for
      particular NETCONF or RESTCONF users to a preconfigured subset of all
      available NETCONF or RESTCONF protocol operations and content.</t>

      <t>The YANG module in this document makes use of grouping that are
      defined in <xref target="I-D.ietf-netconf-http-client-server">YANG
      Groupings for HTTP Clients and HTTP Servers</xref>, and <xref
      target="RFC7407">A YANG Data Model for SNMP Configuration</xref>. Please
      see the Security Considerations section of those documents for
      considerations related to sensitivity and vulnerability of the data
      nodes defined in them.</t>

      <t>There are a number of data nodes defined in this YANG module that are
      writable/creatable/deletable (i.e., config true, which is the default).
      These data nodes may be considered sensitive or vulnerable in some
      network environments. Write operations (e.g., edit-config) to these data
      nodes without proper protection can have a negative effect on network
      operations. These are the subtrees and data nodes and their
      sensitivity/vulnerability:</t>

      <t>
        <list style="symbols">
          <t>The "path" node in "ietf-subscribed-notif-ext" module can be
            modified by a malcious user to point to an invalid URI.</t>
        </list>
      </t>

      <t>Some of the readable data nodes in YANG module may be considered
      sensitive or vulnerable in some network environments. It is thus
      important to control read access (e.g., via get, get-config, or
      notification) to these data nodes. The model does not define any
      readable subtrees and data nodes.</t>

      <t>Some of the RPC operations in YANG module may be considered sensitive
      or vulnerable in some network environments. It is thus important to
      control access to these operations. The model does not define any RPC
      operations.</t>
    </section>

    <section title="IANA Considerations">
      <section title='The "IETF XML" Registry'>
        <t>This document registers two URIs in the "ns" subregistry
          of the "IETF XML" registry <xref target="RFC3688"/>.  Following
          the format in <xref target="RFC3688"/>, the following
          registrations are requested:</t>
        <t>
          <figure>
            <artwork>
   URI: urn:ietf:params:xml:ns:yang:ietf-subscribed-notif-ext
   Registrant Contact: The IESG
   XML: N/A, the requested URI is an XML namespace.

   URI: urn:ietf:params:xml:ns:yang:ietf-https-notif-transport
   Registrant Contact: The IESG
   XML: N/A, the requested URI is an XML namespace.
</artwork>
          </figure>
        </t>
      </section>
      <section title='The "YANG Module Names" Registry'>
        <t>This document registers two YANG modules in the
          "YANG Module Names" registry <xref target="RFC6020"/>.
          Following the format in <xref target="RFC6020"/>, the
          following registrations are requested:</t>
        <t>
          <figure>
            <artwork>
   name:         ietf-subscribed-notif-ext
   namespace:    urn:ietf:params:xml:ns:yang:ietf-subscribed-notif-ext
   prefix:       sne
   reference:    RFC XXXX

   name:         ietf-https-notif-transport
   namespace:    urn:ietf:params:xml:ns:yang:ietf-https-notif-transport
   prefix:       hnt
   reference:    RFC XXXX
</artwork>
          </figure>
        </t>
      </section>

      <section title='The "Capabilities for HTTPS Notification Receivers" Registry'>

        <t>Following the guidelines defined in <xref target="RFC5226"/>,
          this document defines a new registry called "Capabilities for
          HTTPS Notification Receivers".  This registry defines capabilities
          that can be supported by HTTPS-based notification receivers.</t>
        <t>The following note shall be at the top of the registry:</t>
        <t>
          <figure>
            <artwork>This registry defines capabilities that can be
supported by HTTPS-based notification receivers.</artwork>
          </figure>
        </t>

        <t>The fields for each registry are:
          <list style="symbols">
            <t>URN
              <list style="symbols">
                <t>The name of the URN (required).</t>
                <t>The URN must conform to the syntax described by <xref target="RFC8141"/>.</t>
                <t>The URN must begin with the string "urn:ietf:capability:receiver:notification:https".</t>
              </list>
            </t>
            <t>Reference
              <list style="symbols">
                <t>The RFC that defined the URN.</t>
                <t>The RFC must be in the form "RFC &lt;Number&gt;: &lt;Title&gt;.</t>
              </list>
            </t>
            <t>Description
              <list style="symbols">
                <t>An arbitrary description of the algorithm (optional).</t> 
                <t>The description should be no more than a few sentences.</t>
                <t>The description is to be in English, but may contain
                  UTF-8 characters as may be needed in some cases.</t>
              </list>
            </t>
          </list>
        </t>

        <t>The update policy is either "RFC Required".  Updates do not otherwise
          require an expert review by a Designated Expert.</t>

        <t>Following is the initial assignment for this registry:
          <figure>
            <artwork>
Record:
   Name:        urn:ietf:capability:receiver:notification:https:encoding:json
   Reference:   RFC XXXX
   Description: Identifies support for JSON-encoded notifications.

Record:
   Name:        urn:ietf:capability:receiver:notification:https:encoding:xml
   Reference:   RFC XXXX
   Description: Identifies support for XML-encoded notifications.
</artwork>
          </figure>
        </t>
      </section>
    </section>

    <section title="Configuration Examples">
      <t>This section shows two examples for how the "ietf-https-notif-transport"
        module can be used to configure a publisher to send notifications to
        a receiver.</t>

      <t>In both examples, the Publisher, acting as an HTTPS client, is configured
        to send notifications to a receiver at address 192.0.2.1, port 443, and
        path "/some/path", with server certificates, and the corresponding trust
        store that is used to authenticate a connection.</t>

      <section title="Using Subscribed Notifications (RFC 8639)">
        <t>This example shows how an <xref target="RFC8639">RFC 8639</xref>
          based publisher can be configured to send notifications to a
          receiver.</t>
        <t>
          <figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../src/yang/example-https-notif-7.1.xml)
]]></artwork>
          </figure>
        </t>
      </section>

      <section title="Not Using Subscribed Notifications">
        <t>In the case that it is desired to use HTTPS notif outside of
        Subscribed Notifications, there would have to be a module to define
        the configuration for where and how to send the notification.</t>
        <t>Following is an example module.  Note that it is fairly thin as
          it "uses" the "https-receiver-grouping" grouping from the
          "ietf-https-notif-transport" module.</t>
        <t>
          <figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../bin/example-custom-module@YYYY-MM-DD.yang)
]]></artwork>
          </figure>
        </t>
        <t>Following is what the cooresponding configuration looks like:</t>
        <t>
          <figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../src/yang/example-custom-https-notif.xml)
]]></artwork>
          </figure>
        </t>
      </section>
    </section>
  </middle>

  <back>
    <references title="Normative references">
      <?rfc include='reference.RFC.2119'?>
      <?rfc include='reference.RFC.3688'?>
      <?rfc include='reference.RFC.3986'?>
      <?rfc include='reference.RFC.5277'?>
      <?rfc include='reference.RFC.6020'?>
      <?rfc include='reference.RFC.6241'?>
      <?rfc include='reference.RFC.6242'?>
      <?rfc include='reference.RFC.6991'?>
      <?rfc include='reference.RFC.7407'?>
      <?rfc include='reference.RFC.7950'?>
      <?rfc include='reference.RFC.7951'?>
      <?rfc include='reference.RFC.8040'?>
      <?rfc include='reference.RFC.8174'?>
      <?rfc include='reference.RFC.8341'?>
      <?rfc include='reference.RFC.8446'?>
      <?rfc include='reference.RFC.8639'?>
      <?rfc include='reference.I-D.ietf-netconf-notification-messages'?>
      <?rfc include='reference.I-D.ietf-netconf-http-client-server'?>
    </references>
    <references title="Informative references">
      <?rfc include='reference.RFC.5226'?>
      <?rfc include='reference.RFC.8141'?>
    </references>

    <section title="Acknowledgements" numbered="no">
      <t>The authors would like to thank for following for
      lively discussions on list and in the halls (ordered
      by first name):
        Eric Voit,
        Henning Rogge,
        Martin Bjorklund,
        Reshad Rahman,
        and Rob Wilton
      </t>
    </section>
  </back>
</rfc>
